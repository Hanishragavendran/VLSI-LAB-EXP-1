AIM: To simulate and synthesis Logic Gates,Adders and Subtractor using Xilinx ISE.

APPARATUS REQUIRED: Xilinx 14.7 Spartan6 FPGA

PROCEDURE: STEP:1 Start the Xilinx navigator, Select and Name the New project. 
STEP:2 Select the device family, device, package and speed. 
STEP:3 Select new source in the New Project and select Verilog Module as the Source type. 
STEP:4 Type the File Name and Click Next and then finish button. Type the code and save it. 
STEP:5 Select the Behavioral Simulation in the Source Window and click the check syntax. 
STEP:6 Click the simulation to simulate the program and give the inputs and verify the outputs as per the truth table. 
STEP:7 Select the Implementation in the Sources Window and select the required file in the Processes Window. 
STEP:8 Select Check Syntax from the Synthesize XST Process. Double Click in the Floorplan Area/IO/Logic-Post Synthesis process in the User Constraints process group. UCF(User constraint File) is obtained.
STEP:9 In the Design Object List Window, enter the pin location for each pin in the Loc column Select save from the File menu. 
STEP:10 Double click on the Implement Design and double click on the Generate Programming File to create a bitstream of the design.(.v) file is converted into .bit file here. 
STEP:12 Load the Bit file into the SPARTAN 6 FPGA 
STEP:11 On the board, by giving required input, the LEDs starts to glow light, indicating the output.

Logic Diagram :

Logic Gates:
![image](https://github.com/navaneethans/VLSI-LAB-EXPERIMENTS/assets/6987778/ee17970c-3ac9-4603-881b-88e2825f41a4)


Half Adder:

![image](https://github.com/navaneethans/VLSI-LAB-EXPERIMENTS/assets/6987778/0e1ecb96-0c25-4556-832b-aeeedfdfe7b9)


Full adder:

![image](https://github.com/navaneethans/VLSI-LAB-EXPERIMENTS/assets/6987778/9bb3964c-438f-469d-a3de-c1cca6f323fb)


Half Subtractor:

![image](https://github.com/navaneethans/VLSI-LAB-EXPERIMENTS/assets/6987778/731470b7-eb4e-49f8-8bb7-2994052a7184)



Full Subtractor:

![image](https://github.com/navaneethans/VLSI-LAB-EXPERIMENTS/assets/6987778/d66f874b-c1f2-44b3-a035-7149b56430c1)



8 Bit Ripple Carry Adder

![image](https://github.com/navaneethans/VLSI-LAB-EXPERIMENTS/assets/6987778/7385a408-40a5-4203-8050-b72818622d79)



VERILOG CODE:
full adder
module fa_ha(a,b,c,sum,carry);
input a,b,c;
output sum,carry;




endmodule

half adder
module ha(a,b,sum,carry);
input a,b;
output sum,carry;

endmodule

full subtractor

module fs(a,b,bin,d,bout);
input a,b,bin;
output d,bout;



endmodule

half subtractor

module hs(a,b,difference,borrow);
input a,b;
output difference,borrow;



endmodule

logic gates

module logicgates(a,b,andgate,orgate,xorgate,nandgate,norgate,xnorgate,notgate);
input a,b;
output andgate,orgate,xorgate,nandgate,norgate,xnorgate,notgate;
and(andgate,a,b);
or(orgate,a,b);
xor(xorgate,a,b);
nand(nandgate,a,b);  
nor(norgate,a,b);
xnor(xnorgate,a,b);
not(notgate,a);
endmodule

ripplecarryadder 4bit
module rca_4bit(a,b,c,s,carry);
input [3:0]a,b;
input c;
output [3:0]s;
output carry;





endmodule

ripplecarryadder 8bit
module ripple_carry_adder_8bit (
  input [7:0] a,
  input [7:0] b,
  input cin,
  output [7:0] sum,
  output cout
);

  wire c1, c2, c3, c4, c5, c6, c7;

  // Full adder for each bit position
  full_adder_gate fa0 (a[0], b[0], cin, sum[0], c1);
  full_adder_gate fa1 (a[1], b[1], c1, sum[1], c2);
  full_adder_gate fa2 (a[2], b[2], c2, sum[2], c3);
  full_adder_gate fa3 (a[3], b[3], c3, sum[3], c4);
  full_adder_gate fa4 (a[4], b[4], c4, sum[4], c5);
  full_adder_gate fa5 (a[5], b[5], c5, sum[5], c6);
  full_adder_gate fa6 (a[6], b[6], c6, sum[6], c7);
  full_adder_gate fa7 (a[7], b[7], c7, sum[7], cout);

endmodule

// Define a separate module for Full Adder
module full_adder_gate (
  input a,
  input b,
  input cin,
  output sum,
  output cout
);

  assign sum = a ^ b ^ cin;
  assign cout = (a & b) | (cin & (a ^ b));

endmodule


OUTPUT:


half adder



RESULT:
